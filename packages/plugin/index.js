"use strict";var p=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var M=Object.prototype.hasOwnProperty;var j=(e,o)=>{for(var r in o)p(e,r,{get:o[r],enumerable:!0})},N=(e,o,r,i)=>{if(o&&typeof o=="object"||typeof o=="function")for(let t of y(o))!M.call(e,t)&&t!==r&&p(e,t,{get:()=>o[t],enumerable:!(i=k(o,t))||i.enumerable});return e};var O=e=>N(p({},"__esModule",{value:!0}),e);var C={};j(C,{default:()=>E,pluginName:()=>n,resolveExternal:()=>$});module.exports=O(C);var b=require("esbuild"),v=require("fs"),h=require("path");var m={debug:1,info:2,warn:3,error:4},a=e=>m[e]>=m[l.level],l={level:"info",debug:(...e)=>{a("debug")&&console.debug(`[${n}]`,...e)},info:(...e)=>{a("info")&&console.info(`[${n}]`,...e)},warn:(...e)=>{a("warn")&&console.warn(`[${n}]`,...e)},error:(...e)=>{a("error")&&console.error(`[${n}]`,...e)}};var w=require("fs"),L=require("fs/promises"),g=require("path");var f=class extends Error{};var S=async e=>{let o=(0,g.resolve)(e,"package.json");if(!(0,w.existsSync)(o))throw new f(`Cannot find the file "package.json" in "${e}".`);let r=await(0,L.readFile)(o),{main:i}=JSON.parse(r.toString());return(0,g.resolve)(e,i)},P=async(e,o="./node_modules")=>{let r=(0,g.resolve)(o,e);return e.startsWith("@")&&e.slice(e.indexOf("/")+1).includes("/")?`${r}.js`:!e.startsWith("@")&&e.includes("/")?`${r}.js`:S(r)};var n="resolve-external",$=({externalModules:e=[],logLevel:o=l.level})=>({name:n,setup:r=>{let i=r.initialOptions.outdir;if(!i)throw TypeError("Plugin does not supported without `outdir` option.");l.level=o;let t=Object.fromEntries(e.map(({path:s,nodeModulesPath:u})=>[s,u??"./node_modules"]));r.onResolve({filter:/.*/},async({path:s})=>{if(/.*\.[jt]sx?$/.test(s)){l.debug(`Plugin does not resolve single source file "${s}". (.js, .ts, .jsx, .tsx)`);return}if(!(s in t))return;let u=t[s];if(!u)return{errors:[{pluginName:n,id:"cannot-find-node-modules-path",text:`Cannot find the path "${u}".`}]};let d=(0,h.resolve)(i,`${s}.js`);if((0,v.existsSync)(d))return l.debug(`"${d}" file already exists, just skip.`),{path:d,external:!0};let c=await P(s,u);if(!(0,v.existsSync)(c))return{errors:[{pluginName:n,id:"cannot-find-resolve-file",text:`Cannot find the file "${c}".`}]};let x=await(0,b.build)({...r.initialOptions,entryPoints:[c],outfile:d,outdir:void 0,plugins:void 0});return{path:d,external:!0,warnings:x.warnings,errors:x.errors}})}}),E=$;0&&(module.exports={pluginName,resolveExternal});
